name: Linting ,Testing and SonarCloud Scan CI/CD

on:
  # Trigger the workflow on every pull request to the repository
  pull_request:

  workflow_dispatch:
    inputs:
      # Name of the branch to run the workflow on
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: main
  
env:
  BRANCH_NAME: ${{ github.event.inputs.branch || github.ref }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Set up Python 3.11
  setup-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

  # # Lint and format Python code with black and autoflake
  # linting-and-formatting:
  #   needs: setup-python
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code repository
  #       uses: actions/checkout@v3
      
  #     # Check for changes with black and create a branch if changes are found
  #     - name: Check for changes with black
  #       id: black-check
  #       run: |
  #         pip install black
  #         if black --check .; then
  #           echo "BLACK_CHECK_RESULT=success" >> $GITHUB_ENV
  #         else
  #           echo "BLACK_CHECK_RESULT=failure" >> $GITHUB_ENV
  #         fi
      
  #     # Create black-formatting branch if black-check fails
  #     - name: Create black-formatting branch
  #       if: ${{ env.BLACK_CHECK_RESULT == 'failure' }}
  #       run: |
  #         git checkout -b ${{env.BRANCH_NAME}}-black-formatting
  #         exit 1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
      
  #     # Do Code formatting with black and autoflake
  #     - name: Code formatting with black and autoflake
  #       if: ${{ env.BLACK_CHECK_RESULT == 'failure' }}
  #       run: |
  #         pip install black
  #         pip install autoflake
  #         black .
  #         autoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place .
  
  #     # if black-check fails, add changes to git and push to remote branch and create a PR
  #     - name: Add changes to git and push to remote branch and create a PR 
  #       if: ${{ env.BLACK_CHECK_RESULT == 'failure' }}
  #       run: |
  #         git config --local user.email ${{ github.actor }}@users.noreply.github.com
  #         git config --local user.name ${{ github.actor }}
  #         git add .
  #         git commit -m "Format code with black and remove unused imports with autoflake"
  #         git push origin ${{env.BRANCH_NAME}}-black-formatting --force 
  #         gh pr create --title "Format code with black and remove unused imports with autoflake" --body "This PR is auto generated by GitHub Actions" --base "${{ github.ref }}" --head ${{env.BRANCH_NAME}}-black-formatting --repo ${{ github.repository }}
  #         exit 1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
  
  #     # linting with flake8
  #     - name: flake8 linting
  #       run: |
  #         pip install flake8
  #         flake8 .
  
  # # Test Python code with pytest and generate code coverage report in XML format and upload it as an artifact
  # testing-and-code-coverage:
  #   runs-on: ubuntu-latest
  #   needs: linting-and-formatting
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout code repository
  #       uses: actions/checkout@v3
      
  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #         pip install pytest
  #         pip install coverage
  
  #     # Run tests with coverage and fail if coverage is below 80%
  #     - name: Run tests with coverage
  #       run: coverage run --source . --omit '/usr/*' -m pytest
  
  #     # Generate coverage report and fail if coverage is below 80%
  #     - name: Generate coverage report and fail if coverage is below 80%
  #       run: coverage report --fail-under=80 --omit=venv/*,tests/*
      
  #     # Generate coverage report in XML format and upload it as an artifact
  #     - name: Generate coverage report in XML format
  #       run: coverage xml -o coverage.xml --omit=venv/*,tests/*
      
  #     # Upload coverage artifact
  #     - name: Upload coverage artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage-report
  #         path: coverage.xml

  # # SonarCloud Scan
  # sonarCloud-scan:
  #   needs: testing-and-code-coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code repository
  #       uses: actions/checkout@v3

  #     - name: SonarCloud Scan
  #       uses: sonarsource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # # Build Docker image and tag with latest tag
  # docker-build-test:
  #   needs: sonarCloud-scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code repository
  #       uses: actions/checkout@v3

  #     - name: Install Docker CLI
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build Docker image and tag with latest tag
  #       run: |
  #         docker build --file Dockerfile --tag latest .
