name: Main Branch Build and Deploy

on:
  # only run workflow on pull request merged to develop branch
  pull_request:
    types: closed
    branches: main

  # Manually Trigger Workflow
  workflow_dispatch:

jobs:
  # Build and publish Docker image to Amazon ECR and deploy to Amazon ECS
  build-publish-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
          
      # - name: Install Docker CLI
      #   uses: docker/setup-buildx-action@v2

      # # Read version from file and set it as an environment variable
      # - name: Read version from file
      #   id: read_version
      #   run: |
      #     version=$(cat .version)
      #     echo "BUILD_VERSION=v$version" >> $GITHUB_ENV

      # #Create a GitHub release with the version number
      # - name: Create a GitHub release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
      #   with:
      #     tag_name: ${{ env.BUILD_VERSION}}
      #     release_name: Release ${{ env.BUILD_VERSION}}
      #     body: |
      #       Release ${{ env.BUILD_VERSION}} created by GitHub Actions workflow.

      # # Configure AWS credentials for Docker          
      # - name: Configure AWS credentials for Docker
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
        
      # # Docker login to Amazon ECR registry
      # - name: Docker login to Amazon ECR registry
      #   run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DEV }}

      # # Build Docker image and tag with latest tag
      # - name: Build Docker image and tag with latest tag
      #   run: |
      #     docker build --file Dockerfile --tag latest .

      # # Tag Docker image with commit hash and latest tag
      # - name: Tag Docker image with commit hash
      #   run: |
      #     docker tag latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DEV }}:${{ env.BUILD_VERSION}}
      #     docker tag latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DEV }}:latest

      # # Push Docker image with commit hash and latest tag to Amazon ECR
      # - name: Push Docker image with latest tag to Amazon ECR
      #   id: build-image
      #   run: |
      #     docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DEV }}:${{ env.BUILD_VERSION}}
      #     docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DEV }}:latest
      #     echo "IMAGE_NAME=${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DEV }}:latest" >> $GITHUB_ENV

      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service --cluster ${{secrets.ECS_CLUSTER}} --service ${{secrets.ECS_SERVICE}} --force-new-deployment
